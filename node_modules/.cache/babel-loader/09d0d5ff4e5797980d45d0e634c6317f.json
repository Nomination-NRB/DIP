{"ast":null,"code":"import axios from \"axios\";\nimport { ElMessage } from \"element-plus\"; // 创建axios实例\n\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  timeout: 5000 // 默认超时时间\n\n}); // 添加请求拦截器\n\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  // //添加X-Token\n  // if (config.url.split(\"/\").pop() !== \"login\") {\n  //   let token = await getToken();\n  //   console.log(token);\n  //   config.headers[\"X-Token\"] = token;\n  // }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(response => {\n  // 2xx 范围内的状态码都会触发该函数。\n  if (response.headers[\"content-type\"] === \"application/octet-stream\") return response;\n  const res = response.data;\n  return res;\n}, error => {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  console.log(\"err\" + error); // for debug\n\n  ElMessage({\n    message: error.message,\n    type: \"error\",\n    duration: 5 * 1000\n  });\n  return error;\n});\nexport default service;","map":{"version":3,"sources":["/Users/key/Desktop/dip_frontEnd/src/utils/request.js"],"names":["axios","ElMessage","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","headers","res","data","message","type","duration"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B,C,CAEA;;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADM;AACY;AACvCC,EAAAA,OAAO,EAAE,IAFkB,CAEZ;;AAFY,CAAb,CAAhB,C,CAKA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACGC,MAAD,IAAY;AACV;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAOA,MAAP;AACD,CAZH,EAaGC,KAAD,IAAW;AACT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFS,CAEW;;AACpB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAjBH,E,CAoBA;;AACAX,OAAO,CAACO,YAAR,CAAqBS,QAArB,CAA8BP,GAA9B,CACGO,QAAD,IAAc;AACZ;AAEA,MAAIA,QAAQ,CAACC,OAAT,CAAiB,cAAjB,MAAqC,0BAAzC,EACE,OAAOD,QAAP;AAEF,QAAME,GAAG,GAAGF,QAAQ,CAACG,IAArB;AAEA,SAAOD,GAAP;AACD,CAVH,EAWGP,KAAD,IAAW;AACT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EAFS,CAEmB;;AAC5BZ,EAAAA,SAAS,CAAC;AACRqB,IAAAA,OAAO,EAAET,KAAK,CAACS,OADP;AAERC,IAAAA,IAAI,EAAE,OAFE;AAGRC,IAAAA,QAAQ,EAAE,IAAI;AAHN,GAAD,CAAT;AAMA,SAAOX,KAAP;AACD,CArBH;AAwBA,eAAeX,OAAf","sourcesContent":["import axios from \"axios\";\nimport { ElMessage } from \"element-plus\";\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\n  timeout: 5000, // 默认超时时间\n});\n\n// 添加请求拦截器\nservice.interceptors.request.use(\n  (config) => {\n    // 在发送请求之前做些什么\n\n    // //添加X-Token\n    // if (config.url.split(\"/\").pop() !== \"login\") {\n    //   let token = await getToken();\n    //   console.log(token);\n    //   config.headers[\"X-Token\"] = token;\n    // }\n\n    return config;\n  },\n  (error) => {\n    // 对请求错误做些什么\n    console.log(error); // for debug\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\nservice.interceptors.response.use(\n  (response) => {\n    // 2xx 范围内的状态码都会触发该函数。\n\n    if (response.headers[\"content-type\"] === \"application/octet-stream\")\n      return response;\n\n    const res = response.data;\n\n    return res;\n  },\n  (error) => {\n    // 超出 2xx 范围的状态码都会触发该函数。\n    console.log(\"err\" + error); // for debug\n    ElMessage({\n      message: error.message,\n      type: \"error\",\n      duration: 5 * 1000,\n    });\n\n    return error;\n  }\n);\n\nexport default service;\n"]},"metadata":{},"sourceType":"module"}